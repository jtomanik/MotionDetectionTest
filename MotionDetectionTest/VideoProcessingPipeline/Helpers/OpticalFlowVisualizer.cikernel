//
//  OpticalFlowVisualizer.cikernel
//  VisionTest
//
//  Created by Jakub Tomanik on 26/12/2020.
//

kernel vec4 flowView2(sampler image, float minLen, float maxLen, float size, float tipAngle)
{
    /// Determine the color by calculating the angle from the .xy vector
    ///
    vec4 s = sample(image, samplerCoord(image));
    vec2 vector = s.rg - 0.5;
    float len = length(vector);
    float H = atan(vector.y,vector.x);
    // convert hue to a RGB color
    H *= 3.0/3.1415926; // now range [3,3)
    float i = floor(H);
    float f = H-i;
    float a = f;
    float d = 1.0 - a;
    vec4 c;
    if (H<-3.0) c = vec4(0, 1, 1, 1);
    else if (H<-2.0) c = vec4(0, d, 1, 1);
    else if (H<-1.0) c = vec4(a, 0, 1, 1);
    else if (H<0.0)  c = vec4(1, 0, d, 1);
    else if (H<1.0)  c = vec4(1, a, 0, 1);
    else if (H<2.0)  c = vec4(d, 1, 0, 1);
    else if (H<3.0)  c = vec4(0, 1, a, 1);
    else             c = vec4(0, 1, 1, 1);
    // make the color darker if the .xy vector is shorter
    c.rgb *= clamp((len-minLen)/(maxLen-minLen), 0.0,1.0);
    /// Add arrow shapes based on the angle from the .xy vector
    ///
    float tipAngleRadians = tipAngle * 3.1415/180.0;
    vec2 dc = destCoord(); // current coordinate
    vec2 dcm = floor((dc/size)+0.5)*size; // cell center coordinate
    vec2 delta = dcm - dc; // coordinate relative to center of cell
                           // sample the .xy vector from the center of each cell
    vec4 sm = sample(image, samplerTransform(image, dcm));
    vector = sm.rg - 0.5;
    len = length(vector);
    H = atan(vector.y,vector.x);
    float rotx, k, sideOffset, sideAngle;
    // these are the three sides of the arrow
    rotx = delta.x*cos(H) - delta.y*sin(H);
    sideOffset = size*0.5*cos(tipAngleRadians);
    k = 1.0 - clamp(rotx-sideOffset, 0.0, 1.0);
    c.rgb *= k;
    sideAngle = (3.14159 - tipAngleRadians)/2.0;
    sideOffset = 0.5 * sin(tipAngleRadians / 2.0);
    rotx = delta.x*cos(H-sideAngle) - delta.y*sin(H-sideAngle);
    k = clamp(rotx+size*sideOffset, 0.0, 1.0);
    c.rgb *= k;
    rotx = delta.x*cos(H+sideAngle) - delta.y*sin(H+sideAngle);
    k = clamp(rotx+ size*sideOffset, 0.0, 1.0);
    c.rgb *= k;
    /// return the color premultiplied
    c *= s.a;
    return c;
}
